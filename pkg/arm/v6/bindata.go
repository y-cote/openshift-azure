// Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// data/master-startup.sh
// data/node-startup.sh
package arm

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _masterStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\x5f\x6f\x13\xbf\x12\x7d\xc6\x9f\x62\xd8\x14\x4a\x7b\xeb\x6c\x5b\xb8\xba\x28\x10\xa4\x52\x8a\x54\xa9\x97\xa2\x96\x2b\x1e\x00\x55\xce\x7a\xb2\x31\xf1\xda\x7b\xed\x71\xd2\x52\xf6\xbb\xff\xe4\xdd\x4d\xf3\xb7\xa5\x12\x3c\x84\xd4\x3e\x9e\xb1\xcf\x39\x1e\x4f\x3a\x4f\xd3\x81\x32\xe9\x40\xf8\x11\x70\xbc\x66\x4c\x0d\xe1\x29\xe4\x0e\x4b\x48\x27\xc2\xa5\x5a\x0d\x52\x69\xb3\x31\x3a\x48\x91\xb2\x74\xe8\x49\x0c\xde\x00\x8d\xd0\x30\x00\x7f\xe3\x09\x8b\x8c\x34\x78\xb2\x25\x34\x40\x9e\x69\x14\x26\x94\x5d\x52\x05\xba\x3f\xa2\x3c\xba\x89\xca\xf0\x3e\xdc\xc2\x7c\x31\x1e\xfa\xee\xf5\xd0\x03\x1f\x42\x2a\x71\x92\x4a\xe5\xc7\xa9\xf8\x15\x1c\xa6\x0e\xbd\x0d\x2e\x43\x5e\x0a\x47\x07\x0c\x00\xb3\x91\x85\xed\x87\x61\xb0\x76\x46\x88\xe1\x21\x77\xe5\xff\x83\x25\x01\xb0\x0f\xfb\xdb\xf0\xee\xdd\xfc\xe8\x71\x1b\x36\x18\x5a\x5d\xc9\x00\x1c\x7a\xb2\x0e\x33\x6b\x80\x5f\x6c\x98\xcf\x04\x41\x13\xa9\x19\x4a\xa5\xc0\xc2\x9a\xee\x4f\x6f\x0d\xbc\x7d\xbb\x7d\x72\xfe\x71\x9b\xdd\x32\x80\x44\xdb\x9c\x4b\xa7\x26\xe8\x92\x1e\x24\x3f\x6d\x70\x46\x68\x99\xb0\x8a\x9d\x9c\x7f\x5c\x21\x4a\x38\x5a\x67\x6a\x33\x60\x45\x98\xa1\x62\xac\x3d\x76\x19\xb4\x86\xdb\x5b\xe8\x1e\x5b\x33\x54\x79\xf7\xb4\x10\x39\xfa\xee\x27\x2b\x11\xaa\x0a\x9e\xbf\xab\x79\x34\x11\xf5\x7c\xa3\x45\x90\x32\xb9\xc9\x20\x77\x92\xad\x0a\xe1\x33\xaf\x0e\x52\x1d\xcc\x3e\xfc\xfe\x0d\xe4\x02\xde\xab\xd9\x02\x74\x25\x61\xa3\x96\xc4\xa1\x08\x9a\xfc\xa3\xd4\x8a\xeb\xee\xd7\xaa\x9e\x8d\xbc\x0c\xad\x03\xe9\x09\x94\x01\xca\xca\xbd\xd7\xaf\x5e\xbd\x7a\x03\xd2\xb2\x27\xa5\xb3\x64\xfb\x5b\xb7\xd2\xd3\xb3\x67\x7b\xbb\x15\x7b\x52\x5a\x47\xcd\x40\xa7\xb3\xbb\x57\xb1\x27\xaa\x24\x31\xd0\xe8\x81\x1f\xc1\xf9\xe5\xd5\xc7\xd3\x8b\x93\xaf\x47\x67\x67\x57\x47\x67\x67\xe7\x5f\x81\x97\xb0\x55\x07\x01\x5e\x44\x75\x08\x81\xf3\xe6\xff\x4f\x27\x5f\xe3\xe0\x6c\x9a\xcb\x18\x1a\xb6\xea\x4f\xfe\x13\x8e\x8e\x8f\x4f\x3e\x7f\x01\x3e\x65\xd2\x1a\x64\x6c\x96\x87\x7b\x31\xc1\xd6\x59\xfe\xc6\x67\xb5\x84\xe9\x6c\x96\xb1\x0e\x4c\x47\x68\x1a\x27\x28\x93\x83\x89\xaa\x4e\x85\xc8\xd1\x10\x08\x23\xc1\x20\x4d\xad\x1b\x43\x20\xa5\x15\x29\xf4\x90\x5b\xf4\xa0\x0c\x59\x70\x22\x43\xc8\xac\x91\x8a\x94\x35\x5d\xd6\x01\x35\xbc\x5b\xec\x82\xf1\x30\xc0\xa1\x75\x08\xd2\x78\x50\x1e\xc6\xc6\x4e\x0d\x90\x8d\x06\x68\x33\x21\xa0\x91\x10\x4a\x98\x2a\x1a\x01\x16\x25\xdd\x80\x27\xa7\x4c\xce\xa6\x23\xa5\x11\xbe\x7d\x83\xad\x17\x23\xeb\xc9\x88\x02\x81\xcb\x1d\xe8\xf7\x21\x49\xe0\xc7\x8f\xc8\x39\x78\x8d\x58\xc2\x41\xfc\x1e\x8f\xdd\xac\x79\x0a\x0f\x5b\xf7\x32\x9e\x36\x94\x50\x55\xb5\x6e\x30\x8b\xd2\x70\xe7\x91\xe0\x5f\xd7\x0c\xaf\x6b\x6e\x2f\x8f\x2e\xff\x77\x71\xda\xdf\x5e\x88\xf2\x5f\xe1\x09\x5d\x1b\xa4\x99\x87\xaa\xda\xae\x17\xf2\xeb\xd9\xb5\x71\xc1\x00\xe7\xa5\x53\x13\xa5\x31\x47\x09\x9c\xbb\x02\x38\x9f\x11\x1a\xcf\x04\x7c\x02\x69\x2f\x8d\x5f\x7b\xbf\x80\x63\x9b\xed\xc1\x2d\x37\x5a\x85\x92\x05\x13\x13\x36\x2b\x18\x0b\xa5\x14\x84\x3c\x13\x9c\x5c\xf0\xc4\x98\x8f\x29\x15\x70\x87\x90\xf8\xce\x0b\xd8\x8d\x15\x00\x5d\x0f\x76\xba\xbb\x9d\xef\x07\x23\xa2\xd2\xf7\xd2\x74\x4e\xee\x4e\x27\x69\x6e\xa9\x75\x2a\x57\x26\x2d\xea\x63\xa6\xb6\x44\xe3\x47\x6a\x48\xbc\x19\xe8\x8e\xc3\x00\x1b\x1f\xfd\x7d\x8e\x68\x82\xfa\x63\x31\x2a\xbb\xbd\xe5\xd1\x49\x06\x61\xab\xfb\x5e\x64\xe3\x50\xbe\xd7\x76\xf0\x29\x1a\x20\x49\xa0\xaa\x98\xb6\x79\x8e\x0e\x38\x41\xb3\x27\xde\x72\xd2\xf5\x23\x48\xee\xbc\x1c\xaf\xf0\x04\xdd\x0d\x58\xb3\xe0\xa1\x9d\x24\xba\xde\x53\x14\x1c\x72\xa4\xda\x8c\x83\x3a\x0b\x8b\x02\x5d\x0c\x97\xaf\x7c\xba\xcb\x08\x8b\x32\xee\xe3\x83\x72\xfd\xe5\xb9\x76\x5d\x31\x96\xca\xc1\xd6\x02\x8e\x3d\xbc\x47\x69\xa7\x46\x5b\x21\xe3\x36\x9b\x18\xc9\x23\xbd\x7b\x42\x99\x6c\x38\xb9\xc7\xbe\x4b\xf6\x5b\x77\xdc\x77\x06\xb5\xeb\xd6\x84\xee\xad\x0f\x6d\x02\x67\xda\x06\x59\x3a\x3b\x51\x12\x5d\xda\x4b\xaf\xa4\x20\x91\x5e\xd9\x70\x17\x7a\x91\x86\x5e\x6a\x43\xb4\x76\x9c\xfa\xc3\x59\x20\x12\xda\x70\xd1\x44\xe2\x83\x56\xf4\x7e\x5c\xb9\xe2\x83\xaa\x6a\x41\x12\x3d\x29\x23\x62\x01\xea\xc7\x64\xad\x24\x5d\x39\x68\x01\x22\xab\xe7\x66\x8c\x3f\xac\x4b\x9b\x7f\x06\x46\x39\x37\xcb\xe1\xec\x5d\x78\x38\x42\x03\x8a\xba\x7a\x23\x4a\x3f\xb2\xf4\x58\x65\x9b\xb2\x12\x39\xf9\x7b\x65\x23\x97\xbd\xbb\x6f\x77\x53\x8b\xde\xed\x2d\xff\xd5\x68\xc4\x11\x4e\xbe\x1c\x7f\x38\xfe\x72\x76\x75\xf4\xf9\xb4\x9f\xbc\x4c\xee\x91\x6e\x69\xb3\x35\x26\x46\xa9\x9b\x8a\xf6\xd8\x33\xba\x96\xfc\xb0\xa6\x4e\x74\x0f\x8f\x97\x67\xf9\x5e\x19\x9c\xb6\x80\xba\xec\x2f\xdc\xde\x76\x58\x19\x45\x4a\x68\x9e\xe9\x50\x3b\x35\x69\xa5\xd8\xaf\xff\xf5\x67\x95\x67\x69\xb4\x77\xf8\xf2\xf5\xfe\xde\xe2\xd0\xc1\x46\xe0\xc1\x3a\xf0\x70\x23\xf0\xb0\x06\x26\x9b\xb7\xc4\xc9\x8e\xd1\xd4\xb4\xf0\xa1\x75\xbc\xee\x57\x56\xa0\x42\x4e\xd0\x91\xf2\xc8\x4b\x44\xc7\x83\xd3\x1e\x36\x14\xcd\x3a\x0d\x63\xc5\x64\x9d\xa5\x74\x77\x65\xac\xae\x61\x6e\xb5\x86\x45\x3e\x97\xca\xd3\x52\x8f\xb3\x12\xf7\x31\x06\xc7\xfa\xc1\x4d\xea\x52\x1d\x5f\xf0\xaa\x62\x8c\x82\x41\xc9\x85\x2c\xa0\x74\x76\x18\x2d\x3f\x7f\x3b\x32\x6b\xc8\x59\xcd\x4b\x2d\xe2\x3b\xdd\x89\x2f\xbf\xd0\xde\x82\x41\x94\x73\x5c\x57\xdb\x4c\xe8\xee\xc4\xea\x50\xa0\x87\x68\x8c\xcc\xa1\x20\x94\xb3\x56\x22\x76\x75\x4d\xff\x9d\xc5\x06\x22\x76\x19\x6d\xf9\xe5\x05\xec\xff\xe7\xdf\xfb\xf3\xb3\xb4\x15\xeb\x9e\xe0\x71\x13\xc6\x12\xf6\x40\x90\x2d\x54\xc6\xe7\x9b\xad\x5b\x93\xcc\xc5\x9f\x3d\xda\xda\xd2\x43\x30\xa4\x74\x4b\x46\x6c\x64\x42\xc9\xe6\x5d\x34\x9a\xd8\x4b\x6d\x8e\x72\xd7\x76\xaf\x36\xdd\x0f\xa2\x63\x1f\xdd\x01\xa9\xbc\x18\xe8\xfa\x21\xf3\x37\x5e\xdb\x1c\xbc\x32\x59\xdd\x33\x15\xc2\x88\x1c\x01\xe3\xeb\x46\xa3\x08\xa1\x91\xb3\x21\x1f\xc1\xec\xf7\xc0\x42\xc2\x26\x0e\xce\xa2\x6c\xdc\x92\x2d\xd7\xa6\xff\x09\x00\x00\xff\xff\xad\xed\x20\x27\xfd\x0d\x00\x00")

func masterStartupShBytes() ([]byte, error) {
	return bindataRead(
		_masterStartupSh,
		"master-startup.sh",
	)
}

func masterStartupSh() (*asset, error) {
	bytes, err := masterStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "master-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _nodeStartupSh = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x54\x4d\x6b\x1c\x47\x10\xbd\xf7\xaf\x78\x5a\x05\x6f\x42\xe8\x19\xf9\x10\x02\xb2\x25\x08\xc1\x06\x5f\x62\x90\x08\x39\x18\x1f\x7a\xa7\x6b\x66\xda\xdb\x53\xd5\xee\x8f\x5d\xc9\x62\xff\x7b\xe8\x1d\x6d\xa4\x48\xf2\xfa\x36\xd0\xaf\x5e\x55\xbd\x7a\x6f\x4e\x4f\xda\x95\xe3\x76\x65\xd2\x08\x4d\x37\x4a\xb9\x1e\x27\x18\x22\x05\xb4\x1b\x13\x5b\xef\x56\xad\x95\x6e\x4d\x11\x2d\xe5\xae\xed\x53\x36\xab\x37\xc8\x23\xb1\x02\xd2\x6d\xca\x34\x75\xd9\x23\x65\x09\x98\x81\xba\xf3\x64\xb8\x84\x26\xbb\x89\xe2\x0f\x51\x89\xe2\xc6\x75\xf4\x3d\xdc\xa3\xf7\x69\xdd\xa7\xe6\xa6\x4f\xd0\x3d\x5a\x4b\x9b\xd6\xba\xb4\x6e\xcd\xb7\x12\xa9\x8d\x94\xa4\xc4\x8e\x74\x30\x31\xbf\x56\x00\x75\xa3\x60\x79\x1c\x86\x67\x3b\xa2\xd2\x63\x88\xe1\x6b\x91\x6c\x80\x33\x9c\x2d\x71\x79\xf9\xb0\x7a\x1d\x43\x0a\xe7\xa7\x95\x0a\x88\x94\xb2\x44\xea\x84\xa1\xaf\x9e\xbd\xdf\xdd\x69\xb8\x1e\xf4\x15\xcd\x95\x78\xc2\xc2\x71\x1f\xcd\x02\xbb\x9d\x02\x3a\x93\x31\x37\x99\xd1\xad\x35\x34\x09\x37\x5f\x92\x30\xde\xbe\x5d\xbe\xfb\xf8\x7e\xa9\xee\x14\xb0\xf0\x32\x68\x1b\xdd\x86\xe2\xe2\x1c\x8b\x2f\x52\x22\x1b\x6f\x17\x6a\xa7\xde\x7d\x7c\xbf\x6f\x42\x6c\x67\xd2\xc7\x72\x9a\x98\x9f\xeb\xf9\x32\xe0\xc9\xf9\x7a\xa7\xd4\xbd\x38\xa1\x78\x8f\xbb\x3b\x34\x7f\x0a\xf7\x6e\x68\x3e\x4c\x66\xa0\xd4\xfc\x25\x96\xb0\xdb\xe1\xd5\xe5\x5e\x6d\xae\xa8\x57\x4a\x9d\x62\x3b\x12\xcf\xd4\x8e\x07\x70\x85\x6d\x8d\x19\x88\x33\x0c\x5b\x30\xe5\xad\xc4\x35\x4a\x76\xde\x65\x47\x09\x83\x50\x82\xe3\x2c\x88\xa6\x23\x74\xc2\xd6\x65\x27\xdc\xa8\xd3\xaa\xdd\xa1\x38\x16\x4e\x58\x51\x2f\x91\x60\x39\xc1\x25\xac\x59\xb6\x8c\x2c\xd5\x98\xf7\x9d\x68\xaf\x44\x09\xd8\xba\x3c\x82\xa6\x90\x6f\x91\x72\x74\x3c\xa8\xed\xe8\x3c\xe1\xd3\x27\xfc\xf4\xf3\x28\x29\xb3\x99\x08\xda\xfe\x82\x8b\x0b\x2c\x16\xf8\xfc\xf9\x0d\xac\x20\x79\xa2\x80\xd7\xf5\x9b\x49\xdd\xd7\x9c\xe0\xb8\x16\xd7\x75\xdb\x12\xb0\xdb\xd5\xba\xaa\xf1\xcc\xa2\xf6\x24\x89\x32\x7e\xbd\x51\x74\x13\x24\x66\x5c\xff\x71\xfd\xf7\xd5\x87\x8b\xe5\x23\x96\x7f\x24\xae\x29\xde\x93\xcc\xef\xd8\xed\x96\xfb\x42\x7d\x73\xb8\x43\x2c\x0c\xad\x43\x74\x1b\xe7\x69\x20\x0b\xad\xe3\x04\xad\x0f\x82\xd6\x9d\xa0\x37\x68\xcf\xdb\xfa\x79\xfe\x0d\x9a\xee\xbb\x1d\x1d\x79\xbe\x55\x09\xaa\x70\x6d\x38\x57\x28\x55\x82\x35\x99\x74\x67\x74\x8e\x25\x65\x75\xcc\xca\xb9\x30\x59\x6d\xec\x84\x10\xa5\xaf\x8a\x49\x20\x4e\xa3\xeb\xb3\xee\x84\x73\x14\xaf\x83\x37\x4c\xb3\x55\x7d\xa2\x1f\x55\xd5\x63\x3e\xf6\x75\xf5\x15\xc1\xf8\x24\x60\x22\xfb\x80\x6c\xbc\x74\xc6\x37\x1b\xf1\x65\xa2\x04\xeb\x22\xba\x48\x26\x93\x3d\x78\xa5\x66\x7b\xce\x75\x57\x1d\x52\x6d\xa4\xa6\x75\x05\xea\x09\x67\xbf\xff\x76\xf6\x10\x5a\x89\x6e\x70\xdc\x7e\x87\xbc\x0e\xc1\x92\xe9\x1c\x26\xcb\xe4\x3a\xfd\xff\x71\xd1\xc5\xfa\x3b\xf5\x22\x21\xa1\x70\x76\x1e\x93\x49\x99\x62\x75\x6a\x09\xea\x21\x77\xc4\x66\xe5\xe9\x65\x96\xff\x82\xfa\x34\xa6\x47\xd1\x73\xf2\xac\x4b\x66\xe5\x6b\xea\x62\xba\x4d\x5e\x06\x24\xc7\xdd\x3e\x14\x93\x61\x33\x10\x68\x43\xf1\x36\x8f\x15\x92\xc7\x28\x65\x18\x71\xf8\x99\x3c\x6a\x38\xf3\xd0\x81\xe5\xc5\x91\x24\x3c\x7b\xfe\x37\x00\x00\xff\xff\xcf\x34\x08\xe9\x55\x06\x00\x00")

func nodeStartupShBytes() ([]byte, error) {
	return bindataRead(
		_nodeStartupSh,
		"node-startup.sh",
	)
}

func nodeStartupSh() (*asset, error) {
	bytes, err := nodeStartupShBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "node-startup.sh", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"master-startup.sh": masterStartupSh,
	"node-startup.sh":   nodeStartupSh,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"master-startup.sh": {masterStartupSh, map[string]*bintree{}},
	"node-startup.sh":   {nodeStartupSh, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
